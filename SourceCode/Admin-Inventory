/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.librarymanagementsystem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Errica
 */
public class AdminInventory extends javax.swing.JFrame {

    /**
     * Creates new form AdminInventory
     */
    public AdminInventory() {
        initComponents();
        displayBooks();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        pnlInventory = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBooksList = new javax.swing.JTable();
        txtBook_name = new javax.swing.JTextField();
        txtBook_quantity = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnRecords = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtBook_id = new javax.swing.JTextField();
        btnLogout = new javax.swing.JButton();
        listGenre = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        aBookGenre = new javax.swing.JComboBox<>();
        btnOk = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        btnRefresh = new javax.swing.JButton();
        txtBookAuthor = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlInventory.setBackground(new java.awt.Color(128, 0, 0));

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Heavy", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 217, 90));
        jLabel1.setText("BOOKSHELF");

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Book", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("BOOK NAME");

        jLabel3.setFont(new java.awt.Font("Franklin Gothic Book", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("QUANTITY");

        tblBooksList.setBackground(new java.awt.Color(204, 204, 204));
        tblBooksList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "book_id", "book_name", "book_quantity", "book_author"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBooksList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBooksListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBooksList);

        btnAdd.setBackground(new java.awt.Color(255, 204, 0));
        btnAdd.setFont(new java.awt.Font("Franklin Gothic Book", 3, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(255, 204, 0));
        btnUpdate.setFont(new java.awt.Font("Franklin Gothic Book", 3, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(255, 204, 0));
        btnRemove.setFont(new java.awt.Font("Franklin Gothic Book", 3, 14)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnRecords.setBackground(new java.awt.Color(102, 102, 102));
        btnRecords.setFont(new java.awt.Font("Franklin Gothic Book", 3, 14)); // NOI18N
        btnRecords.setForeground(new java.awt.Color(255, 255, 255));
        btnRecords.setText("View Records");
        btnRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecordsActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Franklin Gothic Book", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("BOOK ID");

        txtBook_id.setEditable(false);
        txtBook_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBook_idActionPerformed(evt);
            }
        });

        btnLogout.setBackground(new java.awt.Color(255, 204, 0));
        btnLogout.setFont(new java.awt.Font("Leelawadee UI", 1, 12)); // NOI18N
        btnLogout.setText("Log Out");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        listGenre.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        listGenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CLASSIC", "GRAPHIC NOVEL", "MYSTERY", "DOCUMENTARY" }));
        listGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listGenreActionPerformed(evt);
            }
        });
        listGenre.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                listGenrePropertyChange(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Franklin Gothic Book", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("GENRE");

        aBookGenre.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        aBookGenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CLASSIC", "GRAPHIC NOVEL", "MYSTERY", "DOCUMENTARY" }));
        aBookGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aBookGenreActionPerformed(evt);
            }
        });

        btnOk.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnOk.setText("SEARCH");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("LIBRARIAN ROOM");
        jLabel6.setMaximumSize(new java.awt.Dimension(130, 30));

        jSeparator2.setForeground(new java.awt.Color(255, 204, 0));

        btnRefresh.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Franklin Gothic Book", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("AUTHOR");

        javax.swing.GroupLayout pnlInventoryLayout = new javax.swing.GroupLayout(pnlInventory);
        pnlInventory.setLayout(pnlInventoryLayout);
        pnlInventoryLayout.setHorizontalGroup(
            pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInventoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(pnlInventoryLayout.createSequentialGroup()
                        .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlInventoryLayout.createSequentialGroup()
                                .addComponent(txtBook_id, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlInventoryLayout.createSequentialGroup()
                                .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlInventoryLayout.createSequentialGroup()
                                        .addGap(177, 177, 177)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlInventoryLayout.createSequentialGroup()
                                        .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(aBookGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtBook_name, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtBook_quantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnRemove)
                                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 273, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInventoryLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogout)
                .addGap(23, 23, 23))
            .addGroup(pnlInventoryLayout.createSequentialGroup()
                .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlInventoryLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(listGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlInventoryLayout.createSequentialGroup()
                        .addGap(323, 323, 323)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlInventoryLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtBookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlInventoryLayout.setVerticalGroup(
            pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInventoryLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlInventoryLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBook_id, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtBook_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlInventoryLayout.createSequentialGroup()
                        .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlInventoryLayout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(btnRecords))
                            .addGroup(pnlInventoryLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAdd)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(aBookGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtBook_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate))
                .addGap(9, 9, 9)
                .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtBookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh))
                .addGap(18, 18, 18)
                .addGroup(pnlInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogout)
                .addGap(132, 132, 132))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlInventory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 676, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
//        String book_id_s = txtBook_id.getText();
       String book_name = txtBook_name.getText();
       String bookQ_s = txtBook_quantity.getText();
       String book_genre = aBookGenre.getSelectedItem().toString();
      String book_author = txtBookAuthor.getText();
       if(book_name.equals("")){
           JOptionPane.showMessageDialog(null,"Some field are empty.");
       }
       else if(bookQ_s.equals("")){
            JOptionPane.showMessageDialog(null,"Some field are empty.");
       }    
       else if(book_genre.equals("")){
           JOptionPane.showMessageDialog(null,"Some field are empty.");  
               
       }
       else if(book_author.equals("")){
           JOptionPane.showMessageDialog(null,"Some field are empty.");  
       }
       else{
           try{
//               int book_id  =Integer.parseInt(book_id_s);
               int book_quantity = Integer.parseInt(bookQ_s);
               boolean isExist = addBook(book_name,book_quantity,book_genre,book_author);
               if(isExist){
                    JOptionPane.showMessageDialog(null,"Book already exist, add another one.");
               }else{
                    addBook(book_name,book_quantity,book_genre,book_author);
                    JOptionPane.showMessageDialog(null,"Book added.");
                    clearfields();
               }
           }catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(null,"Some field must contain number(s) only.");
           }
       }
    }                                      

    private void tblBooksListMouseClicked(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
        int i = tblBooksList.getSelectedRow();
        TableModel model = tblBooksList.getModel();
        txtBook_id.setText(model.getValueAt(i,0).toString());
        txtBook_name.setText(model.getValueAt(i,1).toString());
        txtBook_quantity.setText(model.getValueAt(i,2).toString());
        txtBookAuthor.setText(model.getValueAt(i,3).toString());
    }                                         

    private void btnRecordsActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        setVisible(false);
        new BorrowersRecord().setVisible(true);
    }                                          

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        setVisible(false);
        new AdminLogin().setVisible(true);
    }                                         

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        
        String book_name = txtBook_name.getText();
        
        boolean exist = DataHandler.delbook(book_name);
        if(exist){
            DataHandler.delbook(book_name);
            JOptionPane.showMessageDialog(null,"Book Remove.");
            DefaultTableModel model = new DefaultTableModel(null,new String[]{"book_id","book_name","book_quantity","book_author"}) {
//                @Override
                public boolean isCellEditable(int row,int column){
                    return false;
                }
            };
                tblBooksList.setModel(model);
                displayBooks();
        }
       
    }                                         

    private void aBookGenreActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        String genreofbook = aBookGenre.getSelectedItem().toString();
//        txtGenre.setText(genreofbook);
    }                                          

    private void listGenreActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        String genreofbook1 = listGenre.getSelectedItem().toString();      
       
    }                                         

    private void listGenrePropertyChange(java.beans.PropertyChangeEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
          
        String genre = listGenre.getSelectedItem().toString();
        if(genre.equals("")){
          JOptionPane.showMessageDialog(null,"Please Select book genre");
        }else if(genre.equals("CLASSIC")){
            displayBooks1(genre);
        }else if(genre.equals("GRAPHIC NOVEL")){
            displayBooks1(genre);
        }else if(genre.equals("MYSTERY")){
            displayBooks1(genre);
         }else if(genre.equals("DOCUMENTARY")){
            displayBooks1(genre);
         }
        
        
       
    }                                     

    private void txtBook_idActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
         String book_name = txtBook_name.getText();
       String bookQ_s = txtBook_quantity.getText();
       String book_genre = aBookGenre.getSelectedItem().toString();
        String book_author = txtBookAuthor.getText();
       String book_id_s = txtBook_id.getText();
       if(book_name.equals("")){
           JOptionPane.showMessageDialog(null,"Some field are empty.");
       }
       else if(bookQ_s.equals("")){
            JOptionPane.showMessageDialog(null,"Some field are empty.");
       }    
       else if(book_genre.equals("")){
           JOptionPane.showMessageDialog(null,"Some field are empty.");  
               
       }
       else{
           try{
               int book_id  =Integer.parseInt(book_id_s);
               int book_quantity = Integer.parseInt(bookQ_s);
               boolean isExist = updateBook(book_id,book_name,book_quantity,book_genre,book_author);
               if(isExist){  
//                   updateBook(book_name,book_quantity,book_genre);
                    JOptionPane.showMessageDialog(null,"Book Updated.");
                    clearfields();
               }else{
                   
                   JOptionPane.showMessageDialog(null,"Book already exist, add another one.");   
               }
           }catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(null,"Some field must contain number(s) only.");
           }
       }
                     
    }                                         

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        displayBooks();
        clearfields();
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminInventory().setVisible(true);
            }
        });
    }
        //// Display the array of books in the table from database
    public void displayBooks(){
        Object[][] data=null;
        String[] columnNames ={"book_id","book_name","book_quantity","book_author"};
        DefaultTableModel displayModel = new DefaultTableModel(data,columnNames){
            
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        tblBooksList.getTableHeader().setResizingAllowed(false);
        tblBooksList.getTableHeader().setReorderingAllowed(false);
        tblBooksList.setModel(displayModel);
        try(Connection conn = DatabaseConnector.getConnection()){
            String sql = "SELECT * FROM public.library_books ORDER BY book_id ASC ";
            try(PreparedStatement stmt = conn.prepareStatement(sql);
                    ResultSet rs = stmt.executeQuery()) {
                while (rs.next()){
                    String book_id = String.valueOf(rs.getInt("book_id"));
                    String book_name = rs.getString("book_name");
                    String book_quantity = String.valueOf(rs.getInt("book_quantity"));
                    String book_author = rs.getString("book_author");
                    String list[] = {book_id,book_name,book_quantity,book_author};
                    DefaultTableModel tblModel = (DefaultTableModel)tblBooksList.getModel();
                    tblModel.addRow(list);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,"Database connection error: " + e.getMessage());
            
        }
         
    }
    //function for adding books in the table also in the database
    public boolean addBook(String book_name, int book_quantity,String book_genre,String book_author){
        displayBooks();
        try(Connection conn = DatabaseConnector.getConnection()){
            String checkQuery = "SELECT * FROM public.library_books WHERE book_name = ? AND book_author = ?";
            PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
            checkStmt.setString(1,book_name);
            checkStmt.setString(2,book_author);
            ResultSet rs = checkStmt.executeQuery();
            
            if (rs.next()) {
                return true;
            } else {
                // insert new Books
                String insertQuery = "INSERT INTO public.library_books(book_name,book_quantity,book_genre,book_author) VALUES (?,?,?,?)";
                PreparedStatement insertStmt = conn.prepareStatement(insertQuery);
//                insertStmt.setInt(1,book_id);
                insertStmt.setString(1,book_name);
                insertStmt.setInt(2,book_quantity);
                insertStmt.setString(3,book_genre);
                insertStmt.setString(4,book_author);
                insertStmt.executeUpdate();
                String lists[] = {book_name,String.valueOf(book_quantity),book_genre,book_author};
                
               DefaultTableModel tblModel = (DefaultTableModel)tblBooksList.getModel();
               tblModel.addRow(lists);
               return false;
            }
                
            } catch (SQLException e){
                e.printStackTrace();
                return false;
            }
    }
    
    public boolean updateBook(int book_id, String book_name, int book_quantity,String book_genre,String book_author){
       
        try(Connection conn = DatabaseConnector.getConnection()){
            String checkQuery = "SELECT * FROM public.library_books WHERE book_id = ?";
            PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
            checkStmt.setInt(1,book_id);
            ResultSet rs = checkStmt.executeQuery();
            
            if (rs.next()) {
                // insert new Books
                String insertQuery = "UPDATE public.library_books SET book_name = ?, book_quantity = ?, book_genre = ?, book_author = ? WHERE book_id = ?";
                PreparedStatement updatetStmt = conn.prepareStatement(insertQuery);
//                insertStmt.setInt(1,book_id);
                updatetStmt.setString(1,book_name);
                updatetStmt.setInt(2,book_quantity);
                updatetStmt.setString(3,book_genre);
                updatetStmt.setString(4,book_author);
                updatetStmt.setInt(5,book_id);

                
                updatetStmt.executeUpdate();
                displayBooks();
                return true;
            } else {
               return false;
            }
                
            } catch (SQLException e){
                e.printStackTrace();
                return false;
            }
    }
     public void displayBooks1(String book_genre){
        Object[][] data=null;
        String[] columnNames ={"book_id","book_name","book_quantity","book_author"};
        DefaultTableModel displayModel = new DefaultTableModel(data,columnNames){
            
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        tblBooksList.getTableHeader().setResizingAllowed(false);
        tblBooksList.getTableHeader().setReorderingAllowed(false);
        tblBooksList.setModel(displayModel);
        try(Connection conn = DatabaseConnector.getConnection()){
            String sql = "SELECT * FROM public.library_books WHERE book_genre = ? ";
            PreparedStatement stmt = conn.prepareStatement(sql);
                    stmt.setString(1, book_genre);
                    ResultSet rs = stmt.executeQuery();
                while (rs.next()){
                    String book_id = String.valueOf(rs.getInt("book_id"));
                    String book_name = rs.getString("book_name");
                    String book_quantity = String.valueOf(rs.getInt("book_quantity"));
                    String book_author = rs.getString("book_author");
                    String list[] = {book_id,book_name,book_quantity,book_author};
                    DefaultTableModel tblModel = (DefaultTableModel)tblBooksList.getModel();
                    tblModel.addRow(list);
                }
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,"Database connection error: " + e.getMessage());
            
        }
         
    }
       
    void clearfields(){
        txtBook_id.setText("");
        txtBook_name.setText("");
        txtBook_quantity.setText("");
        txtBookAuthor.setText("");
    }    

    
   
    

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<String> aBookGenre;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnRecords;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JComboBox<String> listGenre;
    private javax.swing.JPanel pnlInventory;
    private javax.swing.JTable tblBooksList;
    private javax.swing.JTextField txtBookAuthor;
    private javax.swing.JTextField txtBook_id;
    private javax.swing.JTextField txtBook_name;
    private javax.swing.JTextField txtBook_quantity;
    // End of variables declaration                   
}
